# -*- coding: UTF-8 -*-
import pylab
import math
from numpy import *

################################ Входные данные ################################
Ac=5 #Амплитуда несущего сигнала
Fc=2000.0 #Несущая частота
Wc=2*math.pi*Fc #Угловая частота несущего сигнала
As=1 #Амплитуда исходного сигнала
F1=200.0 #Первая гармоника исходного сигнала
F2=300.0 #Вторая гармоника исходного сигнала
Ws1=2*math.pi*F1 #Угловая частота исходного сигнала (первая гармоника)
Ws2=2*math.pi*F2 #Угловая частота исходного сигнала (вторая гармоника)
Fd=2.0*Wc #Частота дискретизации (min>2*Wc)
Tm=4.0 #Длительность сигнала
FFTL=8000 #Количество линий спектра
m=1 #Девиацией фазы (|Sm|<=1). Девиация фазы показывает максимальное фазовое
    #отклонение модулированного сигнала
################################################################################

#################### Формирование списков значений сигналов ####################
# Формирование списка значений исходного сигнала, длительностью Tm, с шагом 1/Fd
Sm=[As*math.cos(t*(Ws1+Ws2)) for t in arange(0,Tm,(1.0/Fd))]
# формирование списка значений несущего сигнала, длительностью Tm, с шагом 1/Fd
Sc=[Ac*math.cos(Wc*t) for t in arange(0,Tm,(1.0/Fd))]
################################################################################

################## Фазовая манипуляция(phase modulation - PM) ##################
Spm=[Ac*math.cos(Wc*t+m*(As*math.cos(t*(Ws1+Ws2)))) for t in arange(0,Tm,(1.0/Fd))]
################################################################################

######################### Быстрое преобразование Фурье #########################
FFT_Spm=fft.rfft(Spm,FFTL)
FFT_Sm=fft.rfft(Sm,FFTL)
################################################################################

################### Определение функции построения графиков ####################
def plot_signal(x,y,title,labelx,labley,position):
    pylab.subplot (7,1,position)
    pylab.plot(x,y)
    pylab.title(title)
    pylab.xlabel(labelx)
    pylab.ylabel(labley)
    pylab.grid(True)
################################################################################

# Построение осциллограммы исходного сигнала
plot_signal(arange(0,(3/F2),(1.0/Fd)),Sm[0:(int(3*Fd/F2)+1)],'Original signal','Time [s]','Amplitude',1)
# Построение спектра исходного сигнала
plot_signal(arange(0,((Fd/2)+(Fd/FFTL)),(Fd/FFTL)),(abs(FFT_Sm)/(FFTL)),'Spectrum of the original signal','Time [s]','Frequency (kHz)',3)
# Построение осциллограммы PM сигнала
plot_signal(arange(0,(10/F2),(1.0/Fd)),Spm[0:(int(10*Fd/F2)+1)],'PM signal','Time [s]','Amplitude',5)
# Построение спектра PM сигнала
plot_signal(arange(0,((Fd/2)+(Fd/FFTL)),(Fd/FFTL)),(abs(FFT_Spm)/(FFTL)),'PM spectrum signal','Time [s]','Frequency (kHz)',7)

# Отображение графиков
pylab.show()
